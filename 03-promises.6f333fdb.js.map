{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAuCA,SAASC,EAAcC,EAAUC,GAE/B,OADAC,QAAQC,IAAIH,EAAUC,GACf,IAAIG,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAAEL,WAAUC,UAGpBK,EAAO,CAAEN,WAAUC,S,GAEpBA,E,IA7CQS,SAASC,eAAe,QAEhCC,iBAAiB,UAAU,SAAAC,GAChCA,EAAGC,iBAOH,IALI,IAAEC,EAAW,IAAIC,SAASH,EAAGI,QAC3BC,EAAaC,SAASJ,EAASK,IAAI,SAAU,IAC7CC,EAAYF,SAASJ,EAASK,IAAI,QAAS,IAC3CE,EAASH,SAASJ,EAASK,IAAI,UAAW,IAEvCG,EAAI,EAAGA,EAAID,EAAQC,IAC1BxB,EAAcwB,EAAI,EAAGL,EAAaK,EAAIF,GACnCG,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACjByB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAGjD6B,OAAM,SAAAL,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAClByB,EAAA7B,GAAS8B,OAAOI,QACd,sBAAuCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// import { Report } from 'notiflix/build/notiflix-report-aio';\n// import { Confirm } from 'notiflix/build/notiflix-confirm-aio';\n// import { Loading } from 'notiflix/build/notiflix-loading-aio';\n// import { Block } from 'notiflix/build/notiflix-block-aio';\nconst formEl = document.getElementById('form');\n\nformEl.addEventListener('submit', ev => {\n  ev.preventDefault(); // aby nie wysyłało nam formularza abyśmy mogli to zobaczyć w konsoli\n\n  const formData = new FormData(ev.target);\n  const firstDeley = parseInt(formData.get('delay'), 10); // parseInt zamienia nam wartość którą zwracamy na liczby a nie zwraca nam tego w postaci stringa, liczba 10 wskazuje na system dziesiętny\n  const delayStep = parseInt(formData.get('step'), 10);\n  const amount = parseInt(formData.get('amount'), 10);\n\n  for (let i = 0; i < amount; i++) {\n    createPromise(i + 1, firstDeley + i * delayStep)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n\n  // console.log(ev);// sprawdzamy czy na konsoli działa nam sam event\n\n  // console.log(formData.get('delay')); // sprawdzamy czy przekazuje nam wartość z pola o name=\"delay\" - przy wpisaniu 1000 w konsoli zwraca nam tą wartość\n\n  // console.log(firstDeley, delayStep, amount); // sprawdzamy czy nasz event przekazuje nam wszystkie trzy zadeklarowane wartości\n\n  //tworzymy pętlę aby to wszystko wywołało się nie więcej razy niż wskazaliśmy w polu amount\n});\n\nfunction createPromise(position, delay) {\n  console.log(position, delay);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","console","log","Promise","resolve","reject","setTimeout","Math","random","document","getElementById","addEventListener","ev","preventDefault","formData","FormData","target","firstDeley","parseInt","get","delayStep","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.6f333fdb.js.map"}